"""
Django settings for irsmain project.

Generated by 'django-admin startproject' using Django 4.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
from email.policy import default
from genericpath import exists
import os
from pathlib import Path
from xmlrpc.client import boolean
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', cast=bool)

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'categoria',
    'accounts',
    'tienda',
    'carrito',
    'cotizacion',
    'captcha',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
]

ROOT_URLCONF = 'irsmain.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'categoria.context_processors.categorias', #Estoy registrando una funcion para poder usarla, de esta manera hacemos publico la funcion
                'tienda.contexto_publico.contextoPublico',
                'carrito.context_processors.cantidadItemsCarrito',
            ],
        },
    },
]

WSGI_APPLICATION = 'irsmain.wsgi.application'

#Aca defines que empiece a tomar el valor de accounts de la app accounts para crear nuevos usuarios, en vez de el por defecto
AUTH_USER_MODEL = 'accounts.User' #applicacion account, clase User


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases
import dj_database_url

if DEBUG == False:

    DATABASES = {
        'default': dj_database_url.config(default=config('DATABASE_URL'))
    }    

    """ DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }"""
else:
    DATABASES = {
        'default':{
            'ENGINE': 'django.db.backends.mysql',
            'NAME': config('NAME'),
            'USER': config('USER'),
            'PASSWORD': config('PASSWORD'),
            'HOST': config('HOST'),
            'PORT': config('PORT')
        }
    }

# Update database configuration with $DATABASE_URL.


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

if DEBUG == False:
    STATIC_URL = 'static/'
    STATIC_ROOT = BASE_DIR /'staticfiles'
    STATICFILES_DIRS = [
            'irsmain/static'
        ]

    MEDIA_URL = '/media/'
    MEDIA_ROOT = BASE_DIR /'images'
else:
    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
    STATIC_TMP = os.path.join(BASE_DIR, 'static')
    STATIC_URL = 'static/'
    os.makedirs(STATIC_TMP, exist_ok=True)
    os.makedirs(STATIC_ROOT, exist_ok=True)
    STATICFILES_DIRS = (
        os.path.join(BASE_DIR, 'irsmain/static')
    )

from django.contrib.messages import constants as messages

MESSAGE_TAGS = {
    messages.ERROR: 'danger'
}

# Configuracion para que se envien los correos automaticos
EMAIL_HOST = config('EMAIL_HOST')
EMAIL_PORT = config('EMAIL_PORT', cast=int)
EMAIL_HOST_USER = config('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')
EMAIL_USE_TLS = config('EMAIL_USE_TLS', cast=bool)

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

RECAPTCHA_PUBLIC_KEY = config('RECAPTCHA_PUBLIC_KEY')
RECAPTCHA_PRIVATE_KEY = config('RECAPTCHA_PRIVATE_KEY')

STATICFILES_STORAGE = 'whitenoise.storage.CompressedStaticFilesStorage'